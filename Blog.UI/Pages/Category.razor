@page "/category"
@using System.Net.Http
@inject HttpClient Http
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Grids

<h1>Categories</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EjsToast @ref="ToastObj" Title="Info" TimeOut=5000 Icon="e-info" Content="@ToastContent">
        <ToastPosition X="Right"></ToastPosition>
    </EjsToast>
    <EjsDialog @ref="DialogObj" Width="400px" Height="358px" ShowCloseIcon="true" @bind-Visible="@DlgVisible" IsModal="true">
        <DialogTemplates>
            <Header> <div>Feedback</div></Header>
            <Content>
                
                    <EditForm class="new-added-form" Model="@CategoryO" OnValidSubmit="@AddCategory">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Category Name</label>
                            <input @bind="CategoryO.Name" class="form-control" placeholder="e.g Software" />
                            <ValidationMessage For="@(() => CategoryO.Name)" />
                        </div>

                        <div class="col-md-12 form-group text-center mg-t-8">
                            <EjsButton Content="@Content" CssClass="e-success">Add Faculty</EjsButton>
                            <EjsButton HtmlAttributes="@submit" CssClass="e-danger">Reset</EjsButton>
                        </div>
                    </EditForm>
            </Content>
        </DialogTemplates>
        
    </EjsDialog>
    <div class="row">
        <div class="col-md-4">
            <EditForm class="new-added-form" Model="@CategoryO" OnValidSubmit="@AddCategory">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="control-label">Category Name</label>
                    <input @bind="CategoryO.Name" class="form-control" placeholder="e.g Software" />
                    <ValidationMessage For="@(() => CategoryO.Name)" />
                </div>

                <div class="col-md-12 form-group text-center mg-t-8">
                    <EjsButton Content="@Content" CssClass="e-success">Add Faculty</EjsButton>
                    <EjsButton HtmlAttributes="@submit" CssClass="e-danger">Reset</EjsButton>
                </div>
            </EditForm>

        </div>
        <div class="col-md-8">
            <div class="text-left">
                <EjsButton Content="@DContent" @onclick="(async () => await DeleteCateegory(CategoryO.CategoryId))" CssClass="e-danger"></EjsButton>
                <br />
            </div>
            <EjsGrid DataSource="@categories" AllowPaging="true" @ref="Grid">
                <GridPageSettings PageSize="5"></GridPageSettings>
                <GridEditSettings AllowEditing="true"></GridEditSettings>
                <GridEvents RowSelected="RowSelectHandler" TValue="CategoryListVm"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(CategoryO.Name) HeaderText="Categoy Name" TextAlign="TextAlign.Left"></GridColumn>
                </GridColumns>

            </EjsGrid>
        </div>
    </div>

}


@code {
    EjsToast ToastObj;
    EjsDialog DialogObj;
        private bool DlgVisible = false;
    public string ToastContent { get; set; } = "Conference Room 01 / Building 135 10:00 AM-10:30 AM";
    public string Content = "Add Category";
    public string DContent = "";
    private Dictionary<string, object> submit = new Dictionary<string, object>()
{
        { "type", "reset"}
    };
    EjsGrid<CategoryListVm> Grid;
    List<CategoryListVm> categories;
    CategoryListVm CategoryO = new CategoryListVm();

    protected override async Task OnInitializedAsync()
    {
        CategoryO = new CategoryListVm();
        await ClearForm();
    }

    private async Task AddCategory()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/Categories/", CategoryO);

        CategoryO = new CategoryListVm();
        await ClearForm();
    }

    public void RowSelectHandler(RowSelectEventArgs<CategoryListVm> args)
    {
        Content = "Edit Faculty";
        DContent = "<i class=\"fa fa-trash-o\"></i> Delete Selected Row";
        CategoryO = args.Data;
        this.ToastObj.Show();
        this.DialogObj.Show();
    }

    private void OnOverlayclick(object arg)
    {
        this.DialogObj.Hide();
    }
    
    protected async Task DeleteCateegory(int categoryId)
    {
        await Http.SendJsonAsync(HttpMethod.Delete, $"/api/Categories/{categoryId}", categoryId);
        await ClearForm();
    }

    protected void EditCateegory(CategoryListVm category)
    {
        Content = "Edit Faculty";
        CategoryO = category;
    }

    private async Task ClearForm()
    {
        categories = await Http.GetJsonAsync<List<CategoryListVm>>("/api/Categories/");
        CategoryO.CategoryId = 0;
        CategoryO.Name = "";
        CategoryO.AppId = SiteDetail.AppId;
        DContent = "";
        //StateHasChanged();
    }
}
